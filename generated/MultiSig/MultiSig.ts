// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MultiSigOwnerAdded extends ethereum.Event {
  get params(): MultiSigOwnerAdded__Params {
    return new MultiSigOwnerAdded__Params(this);
  }
}

export class MultiSigOwnerAdded__Params {
  _event: MultiSigOwnerAdded;

  constructor(event: MultiSigOwnerAdded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MultiSigOwnerRemoved extends ethereum.Event {
  get params(): MultiSigOwnerRemoved__Params {
    return new MultiSigOwnerRemoved__Params(this);
  }
}

export class MultiSigOwnerRemoved__Params {
  _event: MultiSigOwnerRemoved;

  constructor(event: MultiSigOwnerRemoved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TxConfirmed extends ethereum.Event {
  get params(): TxConfirmed__Params {
    return new TxConfirmed__Params(this);
  }
}

export class TxConfirmed__Params {
  _event: TxConfirmed;

  constructor(event: TxConfirmed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txOriginOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TxExecuted extends ethereum.Event {
  get params(): TxExecuted__Params {
    return new TxExecuted__Params(this);
  }
}

export class TxExecuted__Params {
  _event: TxExecuted;

  constructor(event: TxExecuted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txOriginOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TxSubmitted extends ethereum.Event {
  get params(): TxSubmitted__Params {
    return new TxSubmitted__Params(this);
  }
}

export class TxSubmitted__Params {
  _event: TxSubmitted;

  constructor(event: TxSubmitted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class MultiSig__getTransactionResultValue0Struct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get data(): Bytes {
    return this[4].toBytes();
  }

  get executed(): boolean {
    return this[5].toBoolean();
  }

  get nbOwnerConfirmationsProcessed(): i32 {
    return this[6].toI32();
  }
}

export class MultiSig extends ethereum.SmartContract {
  static bind(address: Address): MultiSig {
    return new MultiSig("MultiSig", address);
  }

  getNumberOfOwnersRequiredForApproval(): BigInt {
    let result = super.call(
      "getNumberOfOwnersRequiredForApproval",
      "getNumberOfOwnersRequiredForApproval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfOwnersRequiredForApproval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfOwnersRequiredForApproval",
      "getNumberOfOwnersRequiredForApproval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnersAddresses(): Array<Address> {
    let result = super.call(
      "getOwnersAddresses",
      "getOwnersAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getOwnersAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOwnersAddresses",
      "getOwnersAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPercentageOfOwnersRequiredForApproval(): i32 {
    let result = super.call(
      "getPercentageOfOwnersRequiredForApproval",
      "getPercentageOfOwnersRequiredForApproval():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getPercentageOfOwnersRequiredForApproval(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getPercentageOfOwnersRequiredForApproval",
      "getPercentageOfOwnersRequiredForApproval():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTransaction(nonce: BigInt): MultiSig__getTransactionResultValue0Struct {
    let result = super.call(
      "getTransaction",
      "getTransaction(uint256):((address,address,uint256,uint256,bytes,bool,uint8))",
      [ethereum.Value.fromUnsignedBigInt(nonce)]
    );

    return changetype<MultiSig__getTransactionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTransaction(
    nonce: BigInt
  ): ethereum.CallResult<MultiSig__getTransactionResultValue0Struct> {
    let result = super.tryCall(
      "getTransaction",
      "getTransaction(uint256):((address,address,uint256,uint256,bytes,bool,uint8))",
      [ethereum.Value.fromUnsignedBigInt(nonce)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MultiSig__getTransactionResultValue0Struct>(value[0].toTuple())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get listOfOwners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddOwnerCall extends ethereum.Call {
  get inputs(): AddOwnerCall__Inputs {
    return new AddOwnerCall__Inputs(this);
  }

  get outputs(): AddOwnerCall__Outputs {
    return new AddOwnerCall__Outputs(this);
  }
}

export class AddOwnerCall__Inputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOwnerCall__Outputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }
}

export class ConfirmTxCall extends ethereum.Call {
  get inputs(): ConfirmTxCall__Inputs {
    return new ConfirmTxCall__Inputs(this);
  }

  get outputs(): ConfirmTxCall__Outputs {
    return new ConfirmTxCall__Outputs(this);
  }
}

export class ConfirmTxCall__Inputs {
  _call: ConfirmTxCall;

  constructor(call: ConfirmTxCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmTxCall__Outputs {
  _call: ConfirmTxCall;

  constructor(call: ConfirmTxCall) {
    this._call = call;
  }
}

export class ExecuteTxCall extends ethereum.Call {
  get inputs(): ExecuteTxCall__Inputs {
    return new ExecuteTxCall__Inputs(this);
  }

  get outputs(): ExecuteTxCall__Outputs {
    return new ExecuteTxCall__Outputs(this);
  }
}

export class ExecuteTxCall__Inputs {
  _call: ExecuteTxCall;

  constructor(call: ExecuteTxCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteTxCall__Outputs {
  _call: ExecuteTxCall;

  constructor(call: ExecuteTxCall) {
    this._call = call;
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class SubmitTxCall extends ethereum.Call {
  get inputs(): SubmitTxCall__Inputs {
    return new SubmitTxCall__Inputs(this);
  }

  get outputs(): SubmitTxCall__Outputs {
    return new SubmitTxCall__Outputs(this);
  }
}

export class SubmitTxCall__Inputs {
  _call: SubmitTxCall;

  constructor(call: SubmitTxCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitTxCall__Outputs {
  _call: SubmitTxCall;

  constructor(call: SubmitTxCall) {
    this._call = call;
  }
}
